c# note:

- difference between convert.Tostring and .To string:
	convert.Tostring--- used for incompatible types
	.Tostring ---- used for compatible types

	    // type conversion
            int i = 1;
            byte b = (byte)i; 

            //--single line comment 
            /*  
             multiple line comments
             */

            // prefix increment -- first increment and then assign-- res: a=2,b=2
            int a = 1;
            int b;
            b = ++a;
            //postfix increment -- assign and then increment-- res: a=2, b=1
            b = a++;

array in c#:

int[] numbers = new int[3] {1,2,3}; ----> object initialization syntax

Aliter-- int[] numbers = new int[3];
	 numbers[0]=1;
	 numbers[1]=2;
	 numbers[2]=3;

Note: Instead of int[] numbers, var numbers is also allowed

character:
-always in single quote. e.g. 'A'
string:
-in double quotes. e.g. "Sai"
ex:
string name= "sainath";
string name= firstName+ " " +lastName;
string name= string.Format("{0} {1}", firstName,lastName);

using string join:
var numbers =  new int[3] {1,2,3}; // object initialisation syntax
string list = string.Join("," , numbers);

To access characters of a string:
string name = "sai";
char firstChar = name[0];

Note: strings are immutable i.e., they can't be changed

verbatim strings:
Note: instead of multiple \ or escape characters, we use one '@' symbol.
e.g.:
string path = "c:\\project\\project1\\folder1";  /-> escape character
string path = @"c:\project\project1\folder";  @->verbarian string

var text = "Hi john\nLook into the following path";
Aliter:
var text = @"Hi john
	     Look into the following path"

Enum: A set of key/value pairs
Note: 1. use enum when there are multiple related constants
      2. enum should be declared at namespace level

Parsing: getting a string and converting it to different type.

Types:
Structures- for smaller ones e.g.- primitive types, custom structures
--struct-> value type
classes- for complex ones e.g. - arrays, strings, custom classes.
--classes-> reference types

syntax of if\else statements:
if(isGoldCustomer)
	price=19.95f;
else
	price=29.95f;

Aliter syntax:
float price = (isGoldCustomer) ? 19.95f : 29.95f;

Break: jumps out of the loop
Continue: jumps to the next iteration

Difference b/n console.write and console.writeline:
console.write----- pointer(i.e output) will be in same line
console.writeline-----pointer will move to the next line.

Note:
Random class is useful for generating random numbers

Array:
1 - dimensional array
	int[] numbers = new int[5];
multi dimensional array-------jagged, rectangular
Rectangular- e.g., var array = new int[5,3];
Jagged 
e.g., var array = new int[3][];
	array[0] = [2,3,6,5]
	array[1] = [2,3,6]
	array[2] = [2,3,6,5,7,8]

Creating lists:
var numbers = new List<int>();
Aliter with object initialization syntax:
var numbers = new List<int>() {1,3,6,9};

String - immutable - searching operation is allowed
stringbuilder - mutable - search not allowed

FileInfo - provides instance methods
File - provides static methods
Note:
1. for small no. of file operations, static is useful.
2. directory and DirectoryInfo are also similar like File and FileInfo
3. security check is done only once when we use FileInfo operations at the time of creating an object whereas for File operations every time.
   Hence, FileInfo is more efficient

Debugging:
F9 - Breakpoint
F5 - Run in the debug mode
ctrl+F5 - Run without debug
Shift+F5 - Stop the debug mode
F10 - Step over
F11 - Step into
shift+F11 - Step out

Watch window:
Debug->window-> watch
Watch - to observe individual variables but we need to type the variables
Autos - the system will show the variables
Locals - shows the variables of local scope